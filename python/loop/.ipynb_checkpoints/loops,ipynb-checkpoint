{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ab8663dc-372d-4ea7-8cce-ea07e8b43737",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "frozenset of list of num:  frozenset({1, 2, 3, 4, 5})\n",
      "frozenset of tuple of str:  frozenset({'hello', 'hi'})\n"
     ]
    }
   ],
   "source": [
    "'''python provides a number of data types\n",
    "1 .. Numeric (int, float , complex)\n",
    "2 .. Sequence (str, list, tuple)\n",
    "3 .. Mapping (dictionary)\n",
    "4 .. Set  Types (set , frozenset)\n",
    "5 .. Boolean Type (True, False)\n",
    "6 .. None Type\n",
    " '''\n",
    "\n",
    "# Numeric Types\n",
    "integer = 10\n",
    "floating = 10.5\n",
    "complex_num = 2 + 3j\n",
    "\n",
    "# Sequence Types\n",
    "string = \"Hello, World!\"\n",
    "list = [1, 2, 3, 4, 5]\n",
    "\n",
    "tuple = (1, 2, 3, 4, 5)\n",
    "# range = range(5)\n",
    "\n",
    "# Mapping Type\n",
    "dictionary = {\"name\": \"John\", \"age\": 30}\n",
    "\n",
    "# Set Types\n",
    "set = {1, 2, 3, 4, 5}\n",
    "frozenset_1 = frozenset([1, 2, 3, 4, 5])\n",
    "frozenset_2 = frozenset(('hi' , 'hello'))\n",
    "print('frozenset of list of num: ' ,frozenset_1)\n",
    "print('frozenset of tuple of str: ' ,frozenset_2)\n",
    "\n",
    "\n",
    "'''A frozenset is an immutable version of a set in Python.\n",
    " This means that once a frozenset is created, its elements cannot be modified, added, or removed.'''\n",
    "\n",
    "# Boolean Type\n",
    "boolean_true = True\n",
    "boolean_false = False\n",
    "\n",
    "# None Type\n",
    "none_example = None\n",
    "\n",
    "\n",
    "# print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22f3690b-cec6-4d91-a96f-ea64d29bcd07",
   "metadata": {},
   "source": [
    "## loops"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d7c399f-4287-4db0-92cc-a7b1dda9e846",
   "metadata": {},
   "source": [
    "loops are used to execute block of code repeatedly either for a specified no. of times or untill condition is satisfied\n",
    "\n",
    "two types of loops :\n",
    "\n",
    "1 .. for loop  (run for a specified no. of times)\n",
    "\n",
    "2 .. while loop (run until the condition is specified)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "215ea75f-b763-48b3-a221-b8fb6dd040c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the integer is :  1 and  the square of int is : 1\n",
      "the integer is :  2 and  the square of int is : 4\n",
      "the integer is :  3 and  the square of int is : 9\n",
      "the integer is :  4 and  the square of int is : 16\n",
      "the integer is :  5 and  the square of int is : 25\n",
      "the integer is :  6 and  the square of int is : 36\n",
      "the integer is :  7 and  the square of int is : 49\n",
      "the integer is :  8 and  the square of int is : 64\n",
      "the integer is :  9 and  the square of int is : 81\n",
      "the integer is :  10 and  the square of int is : 100\n"
     ]
    }
   ],
   "source": [
    "# while loop \n",
    "\n",
    "n = 1\n",
    "while n < 11:\n",
    "    print('the integer is : ',n ,'and ' ,'the square of int is :', n**2)\n",
    "    n += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3caec47f-82b9-4005-8c56-0e40367fcdb5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0a3e9133-f2c4-48a4-9e47-380d5a251661",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter num  22\n",
      "enter num  4\n",
      "enter num  66\n",
      "enter num  5\n",
      "enter num  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22, 4, 66, 5, 7]\n",
      "66\n"
     ]
    }
   ],
   "source": [
    "# write a program to accept 5 nums from user and display the largest and smallest no.\n",
    "\n",
    " \n",
    "n = 1\n",
    "ls = []\n",
    "while n < 6:\n",
    "    num = int(input('enter num '))\n",
    "    ls.append(num)\n",
    "    n += 1\n",
    "    \n",
    "print(ls)\n",
    "\n",
    "print(max(ls))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "718ffef5-0be5-4ac5-b40f-40ce4a88e70a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter number 4\n",
      "do you want to continue y\n",
      "enter number 8\n",
      "do you want to continue n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "# write a program to get the no. till user wants and at the end sum those\n",
    "choose = 'y'\n",
    "sum = 0\n",
    "\n",
    "while choose == 'y':\n",
    "    num = int(input('enter number'))\n",
    "    sum = sum+num\n",
    "    choose = input('do you want to continue')\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9b8e269-a351-4b6a-857f-f815727a88e3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "561de0e1-b296-4bbb-9b93-1094ce526ae3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e471b6c8-fcdf-41dc-a46d-1343d7cacc47",
   "metadata": {},
   "source": [
    " FOR LOOP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b9eb31af-beb1-4375-996d-034bfa8644e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter name virat\n",
      "enter grade 90\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'virat': 90.0}\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter name rohit\n",
      "enter grade 99\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'virat': 90.0, 'rohit': 99.0}\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter name shikhar\n",
      "enter grade 80\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'virat': 90.0, 'rohit': 99.0, 'shikhar': 80.0}\n",
      "the name with highest grade is rohit with grade 99.0\n"
     ]
    }
   ],
   "source": [
    "n = 1\n",
    "my_dict = dict()\n",
    "while n < 4 :\n",
    "    the_name = input('enter name')\n",
    "    the_grade = float(input ('enter grade'))\n",
    "\n",
    "    my_dict[the_name] = the_grade\n",
    "    print(my_dict)\n",
    "    n = n+1\n",
    "\n",
    "    # print(my_dict)\n",
    "max_grade = 0\n",
    "max_grade_name = ''\n",
    "\n",
    "for name, grade in my_dict.items():\n",
    "    if grade > max_grade:\n",
    "        max_grade = grade\n",
    "        max_grade_name = name\n",
    "\n",
    "print(f'the name with highest grade is {max_grade_name} with grade {max_grade}')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f092f23-5a21-4328-bbd1-f26fafc02295",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5569d657-9626-462f-b35a-b7366cf54c02",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cf5b2225-9fdb-4f18-8d58-3174c46ea1b0",
   "metadata": {},
   "source": [
    "NESTED LOOPS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0b18a151-c332-47cb-83a4-b2b7455b9c33",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 4, 5]\n",
      "[2, 3, 4, 5]\n",
      "[2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "rows = 3\n",
    "cols = 4\n",
    "matrix = []\n",
    "\n",
    "for i in range(rows):\n",
    "    row = []\n",
    "    for j in range(1, cols+1):\n",
    "        row.append(j+1)\n",
    "    matrix.append(row)\n",
    "# print(matrix)\n",
    "for i in matrix:\n",
    "    print(i)\n",
    "        \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89202fa5-f5cd-4191-846d-6dbf18ad56d1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ce3c3bc0-2f94-411f-bf5f-f3147b379e90",
   "metadata": {},
   "source": [
    "pass (to perform nothing )\n",
    "\n",
    "break( to break the loop iteration or terminate the loop)\n",
    "\n",
    "continue(to skip a particular iteration)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "d3281139-50b4-4669-9e05-07e9fec1d56d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "h\n",
      "e\n",
      "l\n",
      "l\n",
      "o\n",
      " \n",
      "\n"
     ]
    }
   ],
   "source": [
    "string = 'hello python'\n",
    "\n",
    "for i in string:\n",
    "    print(i)\n",
    "    if i == ' ':\n",
    "        break\n",
    "\n",
    "print() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "572010fc-5607-4b0a-880f-4b0b2366c404",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello pytho\n"
     ]
    }
   ],
   "source": [
    "container = ''\n",
    "count = 0\n",
    "for j in string:\n",
    "    container = container+j\n",
    "    if j == 'o':\n",
    "        count = count+1\n",
    "        \n",
    "    if count == 2:\n",
    "        break\n",
    "print(container)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4009d3f6-ed85-4d4c-a329-c00476c9a604",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ea8b32a-a34d-4ea7-b0a5-910947309b42",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3dfac23e-25d5-435a-a1f1-afb2f7415f11",
   "metadata": {},
   "source": [
    "PASS STATEMENT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c18a4b85-ca73-4f43-a298-bc4038bcbff3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n",
      "14\n"
     ]
    }
   ],
   "source": [
    "for i in range(11,15):\n",
    "    if i%2 == 0:\n",
    "        print(i)\n",
    "    else:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "80af06fc-c161-4027-8f63-4466d8d47432",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 * 1 = 1\t1 * 2 = 2\t1 * 4 = 4\t1 * 5 = 5\t1 * 7 = 7\t1 * 8 = 8\t1 * 10 = 10\t\n",
      "2 * 1 = 2\t2 * 2 = 4\t2 * 4 = 8\t2 * 5 = 10\t2 * 7 = 14\t2 * 8 = 16\t2 * 10 = 20\t\n",
      "\n",
      "4 * 1 = 4\t4 * 2 = 8\t4 * 4 = 16\t4 * 5 = 20\t4 * 7 = 28\t4 * 8 = 32\t4 * 10 = 40\t\n",
      "5 * 1 = 5\t5 * 2 = 10\t5 * 4 = 20\t5 * 5 = 25\t5 * 7 = 35\t5 * 8 = 40\t5 * 10 = 50\t\n",
      "\n",
      "7 * 1 = 7\t7 * 2 = 14\t7 * 4 = 28\t7 * 5 = 35\t7 * 7 = 49\t7 * 8 = 56\t7 * 10 = 70\t\n",
      "8 * 1 = 8\t8 * 2 = 16\t8 * 4 = 32\t8 * 5 = 40\t8 * 7 = 56\t8 * 8 = 64\t8 * 10 = 80\t\n",
      "\n",
      "10 * 1 = 10\t10 * 2 = 20\t10 * 4 = 40\t10 * 5 = 50\t10 * 7 = 70\t10 * 8 = 80\t10 * 10 = 100\t\n"
     ]
    }
   ],
   "source": [
    "# Create a multiplication table from 1 to 10, skipping multiples of 3\n",
    "\n",
    "rows = 10\n",
    "cols = 10\n",
    "skip_multiple = 3\n",
    "\n",
    "for i in range(1, rows + 1):\n",
    "    for j in range(1, cols + 1):\n",
    "        product = i * j\n",
    "        if product % skip_multiple == 0:\n",
    "            continue  # Skip printing multiples of 3\n",
    "        print(f\"{i} * {j} = {product}\", end='\\t')\n",
    "    print()  # Newline after each row\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a56b67c-9f8c-4f42-ad3d-16456063873c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
